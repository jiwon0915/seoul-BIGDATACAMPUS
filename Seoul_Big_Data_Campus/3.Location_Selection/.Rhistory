dat <- fread("building_five.csv")
library(dplyr)
library(data.table)
dat <- fread("building_five.csv")
dat_w <- fread("wifi_dong.csv")
b3_b <- dat %>% filter(dong == "번3동") #번3동 건물
b3_w <- dat_w %>% filter(dong == "번3동") #번3동 와이파이
sg34_b <- dat %>% filter(dong == "상계3.4동")
dat_w <- fread("wifi_dong.csv")
dat_w <- fread("wifi_dong.csv")
b3_b <- dat %>% filter(dong == "번3동") #번3동 건물
b3_w <- dat_w %>% filter(dong == "번3동") #번3동 와이파이
sg34_b <- dat %>% filter(dong == "상계3.4동")
sg34_w <- dat_w %>% filter(dong == "상계3.4동")
b3_bp <- b3_b %>% filter(건물용도 %in%
c("관망탑", "미술관", "파출소",
"노인복지시설","우체국", "기타교육연구및복지시설",
"근로복지시설", "동사무소", "기타공공업무시설"))
b3_b %>% filter(건물용도 == "기타공공업무시설") #뭐있는지 확인해본거
sg34_bp <- sg34_b %>% filter(건물용도 %in%
c("노인복지시설", "우체국", "사회복지시설", "파출소", "기타공공업무시설", "동사무소"))
sg34_b %>% filter(건물용도 =="초등학교") #초등학교는 여러개 있으니까 위에서 안넣고 뭐뭐있는지만 확인해서 일일이 찍어서 넣은거
unique(sg34_b$건물용도)
b3_bp <- rbind(b3_bp, list(NA, NA, "오현초등학교", NA, NA, NA, 37.623169, 127.046779, NA, NA, NA),
list(NA, NA, "번동초등학교", NA, NA, NA, 37.628947, 127.040778, NA, NA, NA))
sg34_bp <- rbind(sg34_bp, list(NA, NA, "신상계초등학교", NA, NA, NA, 37.667973, 127.075775, NA, NA, NA),
list(NA, NA, "덕암초등학교", NA, NA, NA, 37.666551, 127.081293, NA, NA, NA),
list(NA, NA, "한국 SGI 노원문화회관", NA, NA, NA, 37.668248, 127.076457, NA, NA, NA),
list(NA, NA, "수락산당고개지구공원", NA, NA, NA, 37.668740, 127.076942, NA, NA, NA))
b3_b <- rbind(b3_b, b3_bp, b3_bp, b3_bp) # 가중치줄라고 여러번 rbind
b3_bwd <- data.frame()
for (i in 1:nrow(b3_w)){
lon_w <- as.numeric(b3_w$설치위치.X좌표.[i])
lat_w <- as.numeric(b3_w$설치위치.Y좌표.[i])
for (j in 1:nrow(b3_b)){
lon_b <- b3_b$long[j]
lat_b <- b3_b$lat[j]
distance <- distm(c(lon_w, lat_w), c(lon_b, lat_b), fun = distHaversine)
temp <- b3_b[j,]
if(distance < 50){
b3_bwd <- rbind(b3_bwd, temp) # 거리 50m 보다 작으면 데이터프레임에 추가
}
}
}
nrow(unique(b3_bwd)) # 겹치는 곳 있을 수도 있으니
b3_bl <- anti_join(b3_b, b3_bwd) # 원래 빌딩목록에서 anti join
##### p=median function #####
library(tbart) # P-Median 함수가 저장되어 있는 패키지
library(geosphere) # 위경도로 거리를 구할 수 있는 패키지
for (i in 1:nrow(b3_w)){
lon_w <- as.numeric(b3_w$설치위치.X좌표.[i])
lat_w <- as.numeric(b3_w$설치위치.Y좌표.[i])
for (j in 1:nrow(b3_b)){
lon_b <- b3_b$long[j]
lat_b <- b3_b$lat[j]
distance <- distm(c(lon_w, lat_w), c(lon_b, lat_b), fun = distHaversine)
temp <- b3_b[j,]
if(distance < 50){
b3_bwd <- rbind(b3_bwd, temp) # 거리 50m 보다 작으면 데이터프레임에 추가
}
}
}
nrow(unique(b3_bwd)) # 겹치는 곳 있을 수도 있으니
b3_bl <- anti_join(b3_b, b3_bwd) # 원래 빌딩목록에서 anti join
sg34_bwd <- data.frame()
for (i in 1:nrow(sg34_w)){
lon_w <- as.numeric(sg34_w$설치위치.X좌표.[i])
lat_w <- as.numeric(sg34_w$설치위치.Y좌표.[i])
for (j in 1:nrow(sg34_b)){
lon_b <- sg34_b$long[j]
lat_b <- sg34_b$lat[j]
distance <- distm(c(lon_w, lat_w), c(lon_b, lat_b), fun = distHaversine)
temp <- sg34_b[j,]
if(distance < 50){
sg34_bwd <- rbind(sg34_bwd, temp) # 거리 50m 보다 작으면 데이터프레임에 추가
}
}
}
nrow(unique(sg34_bwd)) # 겹치는 곳 있을 수도 있으니
sg34_bl <- anti_join(sg34_b, sg34_bwd) # 원래 빌딩목록에서 anti join
# 거리계산한 행렬을 먼저 생성하고, 이거를 사용해서 p-median을 사용하자.
make_dis_mat <- function(lon, lat, p_median) {
n = length(lon)
dist_mat <- matrix(NA, n, n)
for (i in 1:n) {
lon1 <- lon[i]
lat1 <- lat[i]
if (i %% 20 == 0) {
cat(i, '')
}
for (j in 1:n) {
lon2 <- lon[j]
lat2 <- lat[j]
dist_mat[i, j] <- distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
}
} # 거리를 1대1 대응을 통해 구함
return(dist_mat)
}
p_median <- function(distance_matrix, num_p, seed) {
set.seed(seed) # 시드 지정
initial_value = sample(1:nrow(distance_matrix), num_p) # 초기값을 랜덤으로 p개 선정
result_vec <- tb.raw(distance_matrix, initial_value, T)  # 초기값 넣어서 p_median 알고리즘 적용
distance_matrix[-result_vec, -result_vec] <- 0
distance_matrix[result_vec, ] <- 0 # 중심점들과 연결점들만 남김
for_vec <-  1:nrow(distance_matrix)
for_vec <- for_vec %>% setdiff(result_vec)
for (i in for_vec) {
a <- distance_matrix[i, result_vec]
a[which(a != distance_matrix[i, result_vec] %>% min)] <- 0
# 중심점과 연결점의 조합 중 최단거리만 남김
distance_matrix[i, result_vec] <- a
}
return(distance_matrix)
}
sg34_b <- dat %>% filter(dong == "상계3.4동")
sg34_w <- dat_w %>% filter(dong == "상계3.4동")
sg34_bwd <- data.frame() # 기존 와이파이 반경 내에 있는 건물 담아둘 데이터프레임
for (i in 1:nrow(sg34_w)){
lon_w <- as.numeric(sg34_w$설치위치.X좌표.[i])
lat_w <- as.numeric(sg34_w$설치위치.Y좌표.[i])
for (j in 1:nrow(sg34_b)){
lon_b <- sg34_b$long[j]
lat_b <- sg34_b$lat[j]
distance <- distm(c(lon_w, lat_w), c(lon_b, lat_b), fun = distHaversine)
temp <- sg34_b[j,]
if(distance < 50){
sg34_bwd <- rbind(sg34_bwd, temp) # 거리 50m 보다 작으면 데이터프레임에 추가
}
}
}
nrow(unique(sg34_bwd)) # 겹치는 곳 있을 수도 있으니
sg34_bwd <- unique(sg34_bwd)
sg34_bl <- anti_join(sg34_b, sg34_bwd) # 원래 빌딩목록에서 anti join
sg34_lon <- sg34_bl$long
sg34_lat <- sg34_bl$lat
sg34_distmat = make_dis_mat(sg34_lon, sg34_lat)
options(scipen=999)
plot(x = 1:8, y = c(1789002, 1094281, 839918.6, 695454.9, 616191.8,550372.3, 513023.4, 490427), type = 'b', ylab = '', main = '상계34동')
options(scipen =0)
plot(x = 1:8, y = c(1789002, 1094281, 839918.6, 695454.9, 616191.8,550372.3, 513023.4, 490427), type = 'b', ylab = '', main = '상계34동')
source('C:/Users/Namtaek/Desktop/bigcam/code_to_submit/3.Location_Selection/도봉1동_fin.R', encoding = 'UTF-8')
library(data.table)
library(tidyverse)
library(cluster)
library(mclust)
library(ClusterR)
library(fpc)
library(NbClust)
library(factoextra)
data = fread('data/dataset.csv')
data %>% glimpse
##############
####### Kmeans
# 평균소득과 정보화점수만 이용. 이상치 제거 형태
data_clus1 = data %>% select(평균소득, 정보화점수)
# 이상치제거
Q1 = quantile(data$와이파이개수, probs = c(0.25),na.rm = TRUE)
Q3 = quantile(data$와이파이개수, probs = c(0.75),na.rm = TRUE)
LC = Q1 - 1.5 * (Q3 - Q1)
UC = Q3 + 1.5 * (Q3 - Q1)
data_clus1 <- data_clus1[which((data$와이파이개수 >= LC) & (data$와이파이개수 <= UC)),]
# 데이터 스케일링
data_clus1 = data_clus1 %>% scale() %>% as.data.frame()
set.seed(42)
k4 = kmeans(data_clus1, centers = 4, nstart = 25)
## 4개의 중심이 nbclust함수상에서 괜찮게 나왔고, 행정동의 묶이는 형태도 해석하기에 용이했다.
f =
fviz_nbclust(data_clus1, kmeans, method = "silhouette",
diss = dist(data_clus1, method = "euclidean"))+
labs(subtitle = "Silhouette method")
# 실루엣 시각화
f
f$data
k4$cluster %>% table  # 4번이 타겟 클러스터
kmeans_result = k4$cluster
# 클러스터링 결과 시각화
fviz_cluster(k4, geom = c("point","text"), data = data_clus1)+
theme(panel.background = element_rect(fill = 'white', color = 'black', linetype='solid'),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(size = 7, face = "bold", colour = "grey50"),
axis.text.y = element_text(size = 7, face = "bold", colour = "grey50"),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(face = "bold", size = 10))
# 실루엣: k=4일때 0.3997
# n = 38 인 클러스터가 타겟 클러스터
###############
####### Kmedoid
# 평균소득과 정보화점수만 이용
data_clus1 = data %>% select(평균소득, 정보화점수)
# 데이터 스케일링
data_clus1 = data_clus1 %>% scale() %>% as.data.frame()
# kmedoid 클러스터링
set.seed(42)
pam7 = pam(data_clus1 ,k=7, stand=FALSE)
pam7$silinfo$avg.width
pam7$clustering %>% table  ## 4번이 타겟클러스터
kmedoid_result = pam7$clustering
# 클러스터링 결과 시각화
fviz_cluster(pam7) +
theme(panel.background = element_rect(fill = 'white', color = 'black', linetype='solid'),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
plot.title = element_text(face = "bold", size = 16),
axis.text.x = element_text(size = 7, face = "bold", colour = "grey50"),
axis.text.y = element_text(size = 7, face = "bold", colour = "grey50"),
legend.title = element_text(face = "bold", size = 12),
legend.text = element_text(face = "bold", size = 10))
# 실루엣: k=7일때 0.34
# n = 19인 4번 클러스터가 타겟 클러스터
####################
####### Hierarchical
# 평균소득, 정보화점수, 접근성점수 이용
data_clus1 = data %>% select(평균소득, 정보화점수, 접근성점수)
data_clus1 = data_clus1 %>% scale() %>% as.data.frame()
data_clus1 %>% View
dist_data = dist(data_clus1)
clust1 <- hclust(dist_data, method = "average")
plot(clust1, hang = -10)
nc1 <- NbClust(data_clus1, distance = "euclidean", min.nc = 2, max.nc = 10, method = "average")
barplot(table(nc1$Best.n[1,]), xlab="Numer of Clusters", ylab="Number of Criteria", main="Number of Clusters Chosen")
# 4일때 제일 좋다고 나온다.
hclust_result <- cutree(clust1, k=4)
table(hclust_result)
data %>% cbind(hclust_result) %>% arrange(hclust_result) %>% View
# 실루엣 확인
plot(silhouette(cutree(clust1, k = 3), dist = dist_data, col = 1:4))
par(mfrow = c(1,1))
library(data.table)
library(tidyverse)
library(cluster)
library(mclust)
library(ClusterR)
library(fpc)
library(NbClust)
library(factoextra)
data = fread('data/dataset.csv')
