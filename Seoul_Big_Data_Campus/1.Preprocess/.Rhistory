library(httr)
library(tidyverse)
library(jsonlite)
data = read.csv("서울시 공공와이파이 위치정보.csv")
data = read.csv("서울시 공공와이파이 위치정보.csv")
# 지역명 unique 처리
data_uniq = data[-which(duplicated(data$지역명)),]
library(ggmap)
library(raster)
library(rgeos)
library(maptools)
library(rgdal)
library(sf)
library(data.table)
library(tidyverse)
# https://lovetoken.github.io/r/data_visualization/2018/04/15/sp_proj4string_spTransform.html
# rgdal 패키지의 readOGR패키지로 shape파일 불러옴
dong_boundary  <- readOGR("data/Z_SOP_BND_ADM_DONG_PG.shp")
# Coordinate Reference System
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m")
# 투영방법, 어디를 중심으로? 서울을 중심으로 projetion!
# 구의 이심률, 타원체의 구격 지정
proj4string(dong_boundary) <- from_crs  # Coordinate Reference System만 변경하기 위한 함수
dong_boundary # 기존에 crs값이 NA였는데, 지정해서 문제 해결!
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# sptransform 함수를 통해 toCRS의 형식으로 변환!
dong_boundary <- spTransform(dong_boundary, to_crs)
dong_boundary
dong_boundary <- fortify(dong_boundary, region = 'ADM_DR_CD')
dong_boundary$id <- as.numeric(dong_boundary$id)
dong_boundary <-
dong_boundary %>%
filter(id <= 1174099) # 서울만 추출
dong_boundary = dong_boundary %>% select(-order, -hole, -piece, -group)
dong_boundary %>% head()
#dong_boundary = fread('dong_boundary.csv')
dong_code = fread('SGIS_행정구역코드.csv', encoding = 'UTF-8')
dong_code = dong_code %>% select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
dong_code %>% glimpse
dong_boundary = dong_boundary %>% inner_join(dong_code, by = c('id' = '읍면동코드'))
dong_bound_list = dong_boundary$읍면동명칭 %>% unique
dong_code_list = dong_code$읍면동명칭 %>% unique
dong_bound_list %>% setdiff(dong_code_list)
dong_plot <-
ggplot() +
geom_polygon(data = dong_boundary, aes(x=long, y=lat, group=id), fill = 'white', color = 'black', alpha = 0.9)
dong_plot +
coord_map() +
theme_bw() +
labs(title = "서울 행정동 경계 지도") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5))
write.csv(dong_boundary, 'data/dong_boundary.csv', row.names = F)
finance = fread("living_finance.csv")
library(dplyr)
library(data.table)
finance = fread("living_finance.csv")
dongco = fread('code_haengjeong.csv')[,5:6]
finance = fread("data/living_finance.csv")
dongco = fread('data/code_haengjeong.csv')[,5:6]
colnames(dongco) = c('행정동코드','행정동명')
data = read.table("TB_T_RSPOP_ADMI.txt", sep = '|', header = T,encoding = 'UTF-8')
finance2 = left_join(dongco, finance)
finance2 %>% head()
finance2 %>% head()
ppl1901 <- fread("LOCAL_PEOPLE_DONG_201901.csv", encoding = "UTF-8")
library(data.table)
library(tidyverse)
ppl1901 <- fread("data/LOCAL_PEOPLE_DONG_201901.csv", encoding = "UTF-8")
ppl1901 %>% head()
ppl1901 <- ppl1901[,-c(33:38)]
colnames(ppl1901) <- cols
ppl1901
ppl1901 %>% glimpse
ppl1902 <- fread("data/LOCAL_PEOPLE_DONG_201902.csv", encoding = "UTF-8", fill = TRUE)
cols <- colnames(ppl1902[,-33])
ppl1902 <- ppl1902[,-c(33)]
colnames(ppl1902) <- cols
colnames(ppl1901) <- cols
ppl1903 <- fread("data/LOCAL_PEOPLE_DONG_201903.csv", encoding = "UTF-8")
ppl1903 <- ppl1903[,-c(33:38)]
colnames(ppl1903) <- cols
ppl1904 <- fread("data/LOCAL_PEOPLE_DONG_201904.csv", encoding = "UTF-8")
ppl1904 <- ppl1904[,-c(33)]
colnames(ppl1904) <- cols
ppl1905 <- fread("data/LOCAL_PEOPLE_DONG_201905.csv", encoding = "UTF-8")
ppl1905 <- ppl1905[,-c(33)]
colnames(ppl1905) <- cols
ppl1906 <- fread("data/LOCAL_PEOPLE_DONG_201906.csv", encoding = "UTF-8", fill = TRUE)
ppl1906 <- ppl1906[,-c(33)]
colnames(ppl1906) <- cols
ppl1907 <- fread("data/LOCAL_PEOPLE_DONG_201907.csv", encoding = "UTF-8")
cols <- colnames(ppl1907[,-1])
ppl1907 <- ppl1907[,-c(33)]
colnames(ppl1907) <- cols
ppl1908 <- fread("data/LOCAL_PEOPLE_DONG_201908.csv", encoding = "UTF-8")
cols <- colnames(ppl1908[,-1])
ppl1908 <- ppl1908[,-c(33)]
colnames(ppl1908) <- cols
ppl1909 <- fread("data/LOCAL_PEOPLE_DONG_201909.csv", encoding = "UTF-8", fill = TRUE)
ppl1909 <- ppl1909[,-c(33)]
colnames(ppl1909) <- cols
ppl1910 <- fread("data/LOCAL_PEOPLE_DONG_201910.csv", encoding = "UTF-8" , fill =)
ppl1910 <- ppl1910[,-33]
ppl1910[,-33]
ppl1910 <- fread("data/LOCAL_PEOPLE_DONG_201910.csv", encoding = "UTF-8" , fill = TRUE)
ppl1910 <- ppl1910[,-33]
ppl1910 <- fread("data/LOCAL_PEOPLE_DONG_201910.csv", encoding = "UTF-8" , fill = TRUE, data.table = F)
ppl1910 <- ppl1910[,-33]
ppl1911 <- fread("LOCAL_PEOPLE_DONG_201911.csv", encoding = "UTF-8")
cols <- colnames(ppl1911[,-1])
ppl1911 <- fread("data/LOCAL_PEOPLE_DONG_201911.csv", encoding = "UTF-8")
cols <- colnames(ppl1911[,-1])
ppl1911 <- ppl1911[,-33]
colnames(ppl1911) <- cols
ppl1912 <- fread("data/LOCAL_PEOPLE_DONG_201912.csv", encoding = "UTF-8")
cols <- colnames(ppl1912[,-1])
ppl1912 <- ppl1912[,-c(33)]
colnames(ppl1912) <- cols
bungi191 = rbind(ppl1901, ppl1902, ppl1903)
bungi192 = rbind(ppl1904, ppl1905, ppl1906)
bungi193 = rbind(ppl1907, ppl1908, ppl1909)
bungi194 = rbind(ppl1910, ppl1911, ppl1912)
colnames(ppl1912)
colnames(ppl1911)
colnames(ppl1910) <- cols
dat19 <- rbind(bungi193,bungi194,bungi191, bungi192)
bungi194 = rbind(ppl1910, ppl1911, ppl1912)
dat19 <- rbind(bungi193,bungi194,bungi191, bungi192)
dat19 %>% glimpse
code = fread("code_haengjeong.csv")
code = fread("data/code_haengjeong.csv")
join1819 <- left_join(dat19, code)
code
dat19 %>% colnames
code %>% head
join1819 <- left_join(dat19, code, by = c('행정동코드' = '읍면동코드'))
length(unique(join1819$dong))
length(unique(join1819$행정동코드))
str(join1819)
join1819 %>% select(총생활인구수, dong) %>% group_by(dong) %>% summarise(mean = mean(총생활인구수))
join1819 %>% head
code = fread("data/code_haengjeong.csv")
join1819 <- left_join(dat19, code, by = c('행정동코드' = '읍면동코드'))
join1819 %>% head
code
dat19 %>% dim
dat19 %>% colnames()
dat19 %>% head
library(ggmap)
library(raster)
library(rgeos)
library(maptools)
library(rgdal)
library(sf)
library(data.table)
library(tidyverse)
# https://lovetoken.github.io/r/data_visualization/2018/04/15/sp_proj4string_spTransform.html
# rgdal 패키지의 readOGR패키지로 shape파일 불러옴
dong_boundary  <- readOGR("data/Z_SOP_BND_ADM_DONG_PG.shp")
# Coordinate Reference System
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m")
# 투영방법, 어디를 중심으로? 서울을 중심으로 projetion!
# 구의 이심률, 타원체의 구격 지정
proj4string(dong_boundary) <- from_crs  # Coordinate Reference System만 변경하기 위한 함수
dong_boundary # 기존에 crs값이 NA였는데, 지정해서 문제 해결!
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# sptransform 함수를 통해 toCRS의 형식으로 변환!
dong_boundary <- spTransform(dong_boundary, to_crs)
dong_boundary
dong_boundary <- fortify(dong_boundary, region = 'ADM_DR_CD')
dong_boundary$id <- as.numeric(dong_boundary$id)
dong_boundary <-
dong_boundary %>%
filter(id <= 1174099) # 서울만 추출
dong_boundary = dong_boundary %>% select(-order, -hole, -piece, -group)
dong_boundary %>% head()
#dong_boundary = fread('dong_boundary.csv')
dong_code = fread('data/code_haengjeong_statistics.csv', encoding = 'UTF-8')
dong_code = dong_code %>% select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
dong_code %>% glimpse
dong_boundary = dong_boundary %>% inner_join(dong_code, by = c('id' = '읍면동코드'))
dong_bound_list = dong_boundary$읍면동명칭 %>% unique
dong_code_list = dong_code$읍면동명칭 %>% unique
dong_bound_list %>% setdiff(dong_code_list)
dong_plot <-
ggplot() +
geom_polygon(data = dong_boundary, aes(x=long, y=lat, group=id), fill = 'white', color = 'black', alpha = 0.9)
dong_plot +
coord_map() +
theme_bw() +
labs(title = "서울 행정동 경계 지도") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5))
write.csv(dong_boundary, 'data/dong_boundary.csv', row.names = F)
#dong_boundary = fread('dong_boundary.csv')
dong_code = fread('data/code_haengjeong_statistics.csv', encoding = 'UTF-8')
dong_code = dong_code %>% select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
dong_code
#dong_boundary = fread('dong_boundary.csv')
dong_code = fread('data/code_haengjeong_statistics.csv')
dong_code
dong_code = dong_code %>% select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
#dong_boundary = fread('dong_boundary.csv')
dong_code = fread('data/code_haengjeong_statistics.csv', data.table = F)
dong_code = dong_code %>% select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
dong_code %>% select(읍면동코드, 읍면동명칭)
dong_code = dong_code %>% dplyr::select(읍면동코드, 읍면동명칭) %>% filter(읍면동코드 <= 1174099)
dong_code %>% glimpse
dong_code %>% glimpse
dong_boundary = dong_boundary %>% inner_join(dong_code, by = c('id' = '읍면동코드'))
dong_bound_list = dong_boundary$읍면동명칭 %>% unique
dong_code_list = dong_code$읍면동명칭 %>% unique
dong_bound_list %>% setdiff(dong_code_list)
dong_plot <-
ggplot() +
geom_polygon(data = dong_boundary, aes(x=long, y=lat, group=id), fill = 'white', color = 'black', alpha = 0.9)
dong_plot +
coord_map() +
theme_bw() +
labs(title = "서울 행정동 경계 지도") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
plot.title = element_text(face = "bold", size = 18, hjust = 0.5))
write.csv(dong_boundary, 'data/dong_boundary.csv', row.names = F)
write.csv(dong_boundary, 'data/dong_boundary.csv', row.names = F)
write.csv(dong_boundary, 'data/dong_boundary.csv', row.names = F)
dat19 %>% colnames()
dat19 %>% glimpse
library(data.table)
library(tidyverse)
ppl1902 <- fread("data/LOCAL_PEOPLE_DONG_201902.csv", encoding = "UTF-8", fill = TRUE)
cols <- colnames(ppl1902[,-33])
ppl1902 <- ppl1902[,-c(33)]
colnames(ppl1902) <- cols
ppl1901 <- fread("data/LOCAL_PEOPLE_DONG_201901.csv", encoding = "UTF-8")
ppl1901 <- ppl1901[,-c(33:38)]
colnames(ppl1901) <- cols
ppl1903 <- fread("data/LOCAL_PEOPLE_DONG_201903.csv", encoding = "UTF-8")
ppl1903 <- ppl1903[,-c(33:38)]
colnames(ppl1903) <- cols
ppl1904 <- fread("data/LOCAL_PEOPLE_DONG_201904.csv", encoding = "UTF-8")
ppl1904 <- ppl1904[,-c(33)]
colnames(ppl1904) <- cols
ppl1905 <- fread("data/LOCAL_PEOPLE_DONG_201905.csv", encoding = "UTF-8")
ppl1905 <- ppl1905[,-c(33)]
colnames(ppl1905) <- cols
ppl1906 <- fread("data/LOCAL_PEOPLE_DONG_201906.csv", encoding = "UTF-8", fill = TRUE)
ppl1906 <- ppl1906[,-c(33)]
colnames(ppl1906) <- cols
ppl1907 <- fread("data/LOCAL_PEOPLE_DONG_201907.csv", encoding = "UTF-8")
cols <- colnames(ppl1907[,-1])
ppl1907 <- ppl1907[,-c(33)]
colnames(ppl1907) <- cols
ppl1908 <- fread("data/LOCAL_PEOPLE_DONG_201908.csv", encoding = "UTF-8")
cols <- colnames(ppl1908[,-1])
ppl1908 <- ppl1908[,-c(33)]
colnames(ppl1908) <- cols
ppl1909 <- fread("data/LOCAL_PEOPLE_DONG_201909.csv", encoding = "UTF-8", fill = TRUE)
ppl1909 <- ppl1909[,-c(33)]
colnames(ppl1909) <- cols
ppl1910 <- fread("data/LOCAL_PEOPLE_DONG_201910.csv", encoding = "UTF-8" , fill = TRUE, data.table = F)
ppl1910 <- ppl1910[,-33]
colnames(ppl1910) <- cols
ppl1911 <- fread("data/LOCAL_PEOPLE_DONG_201911.csv", encoding = "UTF-8")
cols <- colnames(ppl1911[,-1])
ppl1911 <- ppl1911[,-33]
colnames(ppl1911) <- cols
ppl1912 <- fread("data/LOCAL_PEOPLE_DONG_201912.csv", encoding = "UTF-8")
cols <- colnames(ppl1912[,-1])
ppl1912 <- ppl1912[,-c(33)]
colnames(ppl1912) <- cols
bungi191 = rbind(ppl1901, ppl1902, ppl1903)
bungi192 = rbind(ppl1904, ppl1905, ppl1906)
bungi193 = rbind(ppl1907, ppl1908, ppl1909)
bungi194 = rbind(ppl1910, ppl1911, ppl1912)
dat19 <- rbind(bungi193,bungi194,bungi191, bungi192)
code = fread("data/code_haengjeong_government.csv")
dat19 %>% colnames()
dat19 %>% glimpse
code
join1819 <- left_join(dat19, code, by = c('행정동코드' = '행정동코드'))
length(unique(join1819$dong))
length(unique(join1819$행정동코드))  # 424개로 문제 없다.
join1819 %>% head
datmean1 <- join1819 %>% select(총생활인구수, dong) %>% group_by(dong) %>% summarise(mean = mean(총생활인구수))
datmean1
datmean1 %>% head()
write.csv(datmean1,file = "data/living_pop.csv", row.names = F)
library(data.table)
library(dplyr)
## 데이터 불러오기
senior <- read.table("data/resident(senior)2019.txt", sep="\t", fill = T, fileEncoding = "UTF-8", stringsAsFactors = F, header = T)
dis <- read.table("data/disabled.txt", sep = "\t", fill=T, fileEncoding = "UTF-8", stringsAsFactors = F, header = T)
bl <- read.table("data/basic living.txt", sep = "\t", fill=T, fileEncoding = "UTF-8", stringsAsFactors = F, header = T)
## 필요한 컬럼만 추출
senior_dong <- senior %>% filter(행정동 !="소계") %>% select(자치구, 행정동, 인구, X65세이상고령자)
## 데이터 불러오기
senior <- read.table("data/resident(senior)2019.txt", sep="\t", fill = T, fileEncoding = "UTF-8", stringsAsFactors = F, header = T)
## 필요한 컬럼만 추출
senior_dong <- senior %>% filter(행정동 !="소계") %>% select(자치구, 행정동, 인구, X65세이상고령자)
dis_dong <- dis %>% filter(동 != "소계" & 동 != "기타") %>% select(동, 합계)
bl_dong <- bl %>% filter(동 != "소계" & 동 != "기타") %>% select(동, `총.수급자.2`)
## 불필요한 행 삭제
senior_dong <- senior_dong[-(1:3),]
dis_dong <- dis_dong[-(1:3),]
bl_dong <- bl_dong[-(1:3),]
## 동 이름으로 join하기 위해 신사동 구분
senior_dong$행정동[duplicated(senior_dong$행정동)]
which(senior_dong$행정동 == "신사동")
senior_dong[329,2] <- "신사동_관"
senior_dong[358,2] <- "신사동_강"
#
which(dis_dong$동 == "신사동")
dis_dong[329,1] <- "신사동_관"
dis_dong[358,1] <- "신사동_강"
#
which(bl_dong$동 == "신사동")
bl_dong[329,1] <- "신사동_관"
bl_dong[358,1] <- "신사동_강"
## 동 기준으로 join
joined <- senior_dong
joined <- full_join(joined, dis_dong, by = "동")
senior_dong
dis_dong %>% head
joined <- full_join(joined, dis_dong, by = c('행정동' = '동')
)
joined
joined <- full_join(joined, bl_dong, by = c('행정동' = '동'))
## 여의도동법정동인데 잘못 들어가있어서 바꾸기
joined[425,]
joined %>% gimpse
joined %>% glimpse
## 여의도동법정동인데 잘못 들어가있어서 바꾸기
joined[425,]
which(joined$동 == "여의동")
which(joined$행정동 == "여의동")
## 여의도동법정동인데 잘못 들어가있어서 바꾸기
joined[425,]
joined[286,5]
joined[286,5] <- 755
joined <- joined[-425,]
sum(is.na(joined)) # 구로구 항동 2020년 신설
## 컬럼명 정리
colnames(joined) <- c("구", "동", "인구", "고령자", "장애인구", "기초생활수급인구" )
str(joined)
joined_s <- joined
joined$일반인구 <- joined$인구 - joined$고령자 - joined$장애인구 - joined$기초생활수급인구
## 각 비율
library(stringr)
joined$일반인구 <- as.numeric(joined$인구) - as.numeric(joined$고령자) - as.numeric(joined$장애인구) - as.numeric(joined$기초생활수급인구)
joined$일반인구
as.numeric(joined$인구)
joined$인구
joined$일반인구 <- joined$인구 %>% as.factor %>% as.numeric - as.numeric(joined$고령자) - as.numeric(joined$장애인구) - as.numeric(joined$기초생활수급인구)
joined$인구 %>% as.factor %>% as.numeric
joined$인구
joined$인구 %>% as.factor
joined$인구 %>% as.factor %>% as.numeric
joined_s
joined_s %>% glimpse
joined %>% mutate(일반인구 = 인구 - 고령자 - 장애인구 - 기초생활수급인구)
joined$인구
as.numeric(joined$고령자)
joined$고령자
joined$고령자 %>% str_replace_all(',', '')
joined$인구 %>% str_replace_all(',', '') %>% as.numeric() -
joined$고령자 %>% str_replace_all(',', '') %>% as.numeric() -
joined$장애인구 %>% str_replace_all(',', '') %>% as.numeric() -
joined$기초생활수급인구%>% str_replace_all(',', '') %>% as.numeric()
joined$일반인구 <-
joined$인구 %>% str_replace_all(',', '') %>% as.numeric() -
joined$고령자 %>% str_replace_all(',', '') %>% as.numeric() -
joined$장애인구 %>% str_replace_all(',', '') %>% as.numeric() -
joined$기초생활수급인구%>% str_replace_all(',', '') %>% as.numeric()
## 각 비율
joined$인구 <- str_replace_all(joined$인구, ",", "")
joined$인구 <- as.numeric(joined$인구)
joined$고령자 <- str_replace_all(joined$고령자, ",", "")
joined$고령자 <- as.numeric(joined$고령자)
joined$장애인구 <- str_replace_all(joined$장애인구, ",", "")
joined$장애인구 <- as.numeric(joined$장애인구)
joined$기초생활수급인구 <- str_replace_all(joined$기초생활수급인구, ",", "")
joined$기초생활수급인구 <- as.numeric(joined$기초생활수급인구)
str(joined)
joined$고령자비율 <- (joined$고령자/joined$인구)
joined$장애인비율 <- (joined$장애인구/joined$인구)
joined$기초비율 <- (joined$기초생활수급인구/joined$인구)
joined$일반비율 <- (joined$일반인구/joined$인구)
joined %>% glimpse
## 정보화격차지수
joined$정보화점수 <- (joined$고령자비율 * 0.5) + (joined$장애인비율 * 0.669) + (joined$기초비율 * 0.835) + (joined$일반비율*1.0)
joined[9,2] <- "종로5.6가동"
joined %>% glimpse
par(mfrow=c(1,1))
##
write.csv(joined,"informatization_score.csv", row.names=F)
##
write.csv(joined,"data/informatization_score.csv", row.names=F)
